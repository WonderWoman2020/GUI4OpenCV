#pragma once

#include <QtWidgets/QMainWindow>
#include <QPixmap>
#include <QFileDialog>
#include <QScrollBar>
#include <QGraphicsScene>
#include <QMessageBox>

#include <QCursor>

#include "ui_GUI4OpenCV.h"

#include <opencv2/core.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/imgproc.hpp>

#include "ImageConverter.h"
#include "ImageLoader.h"
#include "DebugPrintSettings.h"
#include "HistogramCalculator.h"
#include "ImageViewHandler.h"

#include "StructuringMatrixWindow.h"
#include "FilterMatrixWindow.h"
#include "AlphaSliderWindow.h"
#include "SecondImageWindow.h"

#include "AlphaBlendingController.h"

QT_BEGIN_NAMESPACE
namespace Ui { class GUI4OpenCVClass; };
QT_END_NAMESPACE

class GUI4OpenCV : public QMainWindow
{
    Q_OBJECT

public:
    GUI4OpenCV(QWidget *parent = nullptr);
    ~GUI4OpenCV();

public slots:

    /**
     * Handles syncing and desyncing source and output image views corresponding scrolls bars.
     */
    void on_actionSync_triggered();

    /**
     * Handles opening source image action.
     */
    void on_actionOpen_triggered();

    /**
     * Handles saving processed image action.
     */
    void on_actionSave_triggered();

    /**
     * Slot that activates update of histograms (same as other histogram option triggers).
     */
    void on_actionHistB_triggered();

    /**
     * Slot that activates update of histograms (same as other histogram option triggers).
     */
    void on_actionHistG_triggered();

    /**
     * Slot that activates update of histograms (same as other histogram option triggers).
     */
    void on_actionHistR_triggered();

    /**
     * Slot that activates update of histograms (same as other histogram option triggers).
     */
    void on_actionHistGrayscale_triggered();

    /**
     * Opens 'about app' information window.
     */
    void on_actionAboutApp_triggered();

    /**
     * Opens 'about Qt framework' information window.
     */
    void on_actionAboutQt_triggered();

    /**
     * Example on how to change cursor icon to loading.
     */
    void on_actionCursorTest_triggered();

    /**
     * Slot that builds necessary components for executing alpha blending operation and runs them.
     */
    void on_actionAlphaBlending_triggered();

    /**
     * Shows structuring matrix input window.
     * --- Needs to be implemented to run an image processing operation.
     * See example how it can be done in 'GUI4OpenCV::on_actionAlphaBlending_triggered()' ---
     */
    void on_actionStructuringMatrix_triggered();

    /**
     * Shows filter matrix input window.
     * --- Needs to be implemented to run an image processing operation.
     * See example how it can be done in 'GUI4OpenCV::on_actionAlphaBlending_triggered()' ---
     */
    void on_actionFilterMatrix_triggered();

    /**
     * Slot that receives the processed image and updates output image view. Controller of the processing operation needs to be connected to this slot.
     * See example of connecting AlphaBlendingController object's sendResult() method in 'GUI4OpenCV::on_actionAlphaBlending_triggered()'.
     * @param result - Resulting image sent by one of image processing algorithm, that have been connected to this slot.
     */
    void receiveProcessingResult(cv::Mat& result);

signals:
    
    /**
     * Signal that must be emitted whenever source image was changed (new source image was loaded).
     * @param src - new source image.
     */
    void srcImageChanged(cv::Mat& src);

    /**
     * Signal that must be emitted whenever output image was changed (new source image was loaded or image processing result has been received).
     * @param out - new output image.
     */
    void outImageChanged(cv::Mat& out);

private:

    /**
     * Field generated by Qt framework, that gives access to UI elements present in view file of this class - 'GUI4OpenCV.ui'.
     * It is only needed, if the class uses statically build view, that is the one stored as XML .ui file.
     * If a view of some class is being build dynamically in C++ code, then this field isn't present.
     */
    Ui::GUI4OpenCVClass *ui;

    /**
     * Dependency object that takes image and calculates histograms of all its color spaces.
     * It also has method for drawing the histogram chart as an cv::Mat image.
     */
    HistogramCalculator* histogramCalculator;

    /**
     * Dependency object that takes image view (of Qt type: QGraphicsView) and an image and sets it in that view. 
     * It can also take 2 image views and synchronize its corresponding scroll bars movement.
     */
    ImageViewHandler* imageViewHandler;

    /**
     * Dependency object that handles opening and saving image dialogs.
     * It also takes care of actual opening and saving of the images.
     */
    ImageLoader* imageLoader;

    /**
     * Utility dependency object that sets how debug information of this window and its child elements will be printed out.
     */
    DebugPrintSettings* debugSettings;

    /**
     * Source image that can be processed by one of the app's image processing algorithms.
     * It is stored as in memory, OpenCV cv::Mat type. Images are always loaded with 3 color spaces and in OpenCV's BGR format.
     * Allowed file types to read by the app are: JPG, JPEG, PNG and BMP.
     */
    cv::Mat srcImage;

    /**
     * Output image that is a copy of source image or a result of one of the app's image processing algorithms.
     * It is stored as in memory, OpenCV cv::Mat type. The image color spaces number and color format depends on what certain algorithms return.
     * Allowed file types to write by the app are: JPG, JPEG, PNG and BMP.
     */
    cv::Mat outImage;

    /**
     * Histogram values calculated for all color spaces of source image. It is a vector of 3 histogram arrays, stored in following order:
     * at index 0 - blue color space histogram array,
     * at index 1 - green color space histogram array,
     * at index 2 - red color space histogram array.
     * Each array has 256 values (for each possible brightness value), that represent count of pixels of the image that have the same brightness level.
     * The arrays are stored as matrix of size 1x256 (256 rows with 1 column each).
     */
    std::vector<cv::Mat> srcHistograms;

    /**
     * Same as 'srcHistograms' field, except this one is for output image histograms. Another deviation is that it can have different number
     * of color spaces, as it depends of color format of processed image. If it has only 1 channel, it might be histogram of grayscale.
     */
    std::vector<cv::Mat> outHistograms;

    /**
     * Image that is a histogram chart of source image color spaces.
     */
    cv::Mat srcHistogramImage;

    /**
     * Image that is a histogram chart of output image color spaces.
     */
    cv::Mat outHistogramImage;

    /**
     * Field storing author name, that is set in main window title and in 'about app' window. 
     */
    QString authorName = "Imie i nazwisko";

    /**
     * Updates other components that are related to current source image.
     */
    void onSrcImageChanged();

    /**
     * Updates other components that are related to current output image.
     */
    void onOutImageChanged();

    /**
     * Draws histogram of source or output image and updates its view. Draws charts only of the color spaces chosen by user.
     * @param srcHistogramChanged - Which image histogram to update. True - update source image histogram, False - update the output one.
     */
    void onHistogramChanged(bool srcHistogramChanged);
};
